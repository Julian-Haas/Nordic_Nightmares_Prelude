//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/06_PersonalSpaces/Julian/toSort/InputManager.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @InputManager: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @InputManager()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""InputManager"",
    ""maps"": [
        {
            ""name"": ""PlayerMovementActionMap"",
            ""id"": ""a8f5ea9c-7c44-42b4-bae2-bf8d7b964baf"",
            ""actions"": [
                {
                    ""name"": ""Move Left"",
                    ""type"": ""Button"",
                    ""id"": ""5489976e-a83a-453b-846e-1df6d31146bb"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Move Right"",
                    ""type"": ""Button"",
                    ""id"": ""6edecf35-c4c3-4b86-bb8f-9eb81012d2f8"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Move Forward"",
                    ""type"": ""Button"",
                    ""id"": ""c2986ff9-eef3-4ca3-903f-ec046ca54831"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Move Backwards"",
                    ""type"": ""Button"",
                    ""id"": ""8eef35c2-7c92-46de-be73-b9aab0bd516b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MovementInput"",
                    ""type"": ""Value"",
                    ""id"": ""8c52ce53-9a55-4130-9256-21dd8c1f8326"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""6ac0931c-e514-4c4a-baa3-5cfe5007ccce"",
                    ""path"": ""<Keyboard>/l"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move Left"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6b65dbe9-b0ae-4c4b-bb4c-9edce9877a66"",
                    ""path"": ""<Keyboard>/l"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move Right"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""fb3ba798-324b-4b41-9b8f-d2fdbcaf9ba5"",
                    ""path"": ""<Keyboard>/l"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move Forward"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""115fc026-8da1-4371-aa63-951c6b7fbaad"",
                    ""path"": ""<Keyboard>/l"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move Backwards"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""015ba169-0a01-4f14-92e9-cca36a2b4a46"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MovementInput"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""75a02931-a32e-42d4-8521-dfb765b470ac"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MovementInput"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""b9c60f2f-b8f0-43fd-8357-78aa285eb5f2"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MovementInput"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""7dc5bbcf-5274-4707-abe8-d05ad34e345b"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MovementInput"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""5967dd81-cd08-451d-8d35-9b3a79013ea3"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MovementInput"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""3cf32b7c-e28d-4b2b-9aa1-ea9d0d2b93ee"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MovementInput"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // PlayerMovementActionMap
        m_PlayerMovementActionMap = asset.FindActionMap("PlayerMovementActionMap", throwIfNotFound: true);
        m_PlayerMovementActionMap_MoveLeft = m_PlayerMovementActionMap.FindAction("Move Left", throwIfNotFound: true);
        m_PlayerMovementActionMap_MoveRight = m_PlayerMovementActionMap.FindAction("Move Right", throwIfNotFound: true);
        m_PlayerMovementActionMap_MoveForward = m_PlayerMovementActionMap.FindAction("Move Forward", throwIfNotFound: true);
        m_PlayerMovementActionMap_MoveBackwards = m_PlayerMovementActionMap.FindAction("Move Backwards", throwIfNotFound: true);
        m_PlayerMovementActionMap_MovementInput = m_PlayerMovementActionMap.FindAction("MovementInput", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // PlayerMovementActionMap
    private readonly InputActionMap m_PlayerMovementActionMap;
    private List<IPlayerMovementActionMapActions> m_PlayerMovementActionMapActionsCallbackInterfaces = new List<IPlayerMovementActionMapActions>();
    private readonly InputAction m_PlayerMovementActionMap_MoveLeft;
    private readonly InputAction m_PlayerMovementActionMap_MoveRight;
    private readonly InputAction m_PlayerMovementActionMap_MoveForward;
    private readonly InputAction m_PlayerMovementActionMap_MoveBackwards;
    private readonly InputAction m_PlayerMovementActionMap_MovementInput;
    public struct PlayerMovementActionMapActions
    {
        private @InputManager m_Wrapper;
        public PlayerMovementActionMapActions(@InputManager wrapper) { m_Wrapper = wrapper; }
        public InputAction @MoveLeft => m_Wrapper.m_PlayerMovementActionMap_MoveLeft;
        public InputAction @MoveRight => m_Wrapper.m_PlayerMovementActionMap_MoveRight;
        public InputAction @MoveForward => m_Wrapper.m_PlayerMovementActionMap_MoveForward;
        public InputAction @MoveBackwards => m_Wrapper.m_PlayerMovementActionMap_MoveBackwards;
        public InputAction @MovementInput => m_Wrapper.m_PlayerMovementActionMap_MovementInput;
        public InputActionMap Get() { return m_Wrapper.m_PlayerMovementActionMap; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerMovementActionMapActions set) { return set.Get(); }
        public void AddCallbacks(IPlayerMovementActionMapActions instance)
        {
            if (instance == null || m_Wrapper.m_PlayerMovementActionMapActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PlayerMovementActionMapActionsCallbackInterfaces.Add(instance);
            @MoveLeft.started += instance.OnMoveLeft;
            @MoveLeft.performed += instance.OnMoveLeft;
            @MoveLeft.canceled += instance.OnMoveLeft;
            @MoveRight.started += instance.OnMoveRight;
            @MoveRight.performed += instance.OnMoveRight;
            @MoveRight.canceled += instance.OnMoveRight;
            @MoveForward.started += instance.OnMoveForward;
            @MoveForward.performed += instance.OnMoveForward;
            @MoveForward.canceled += instance.OnMoveForward;
            @MoveBackwards.started += instance.OnMoveBackwards;
            @MoveBackwards.performed += instance.OnMoveBackwards;
            @MoveBackwards.canceled += instance.OnMoveBackwards;
            @MovementInput.started += instance.OnMovementInput;
            @MovementInput.performed += instance.OnMovementInput;
            @MovementInput.canceled += instance.OnMovementInput;
        }

        private void UnregisterCallbacks(IPlayerMovementActionMapActions instance)
        {
            @MoveLeft.started -= instance.OnMoveLeft;
            @MoveLeft.performed -= instance.OnMoveLeft;
            @MoveLeft.canceled -= instance.OnMoveLeft;
            @MoveRight.started -= instance.OnMoveRight;
            @MoveRight.performed -= instance.OnMoveRight;
            @MoveRight.canceled -= instance.OnMoveRight;
            @MoveForward.started -= instance.OnMoveForward;
            @MoveForward.performed -= instance.OnMoveForward;
            @MoveForward.canceled -= instance.OnMoveForward;
            @MoveBackwards.started -= instance.OnMoveBackwards;
            @MoveBackwards.performed -= instance.OnMoveBackwards;
            @MoveBackwards.canceled -= instance.OnMoveBackwards;
            @MovementInput.started -= instance.OnMovementInput;
            @MovementInput.performed -= instance.OnMovementInput;
            @MovementInput.canceled -= instance.OnMovementInput;
        }

        public void RemoveCallbacks(IPlayerMovementActionMapActions instance)
        {
            if (m_Wrapper.m_PlayerMovementActionMapActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPlayerMovementActionMapActions instance)
        {
            foreach (var item in m_Wrapper.m_PlayerMovementActionMapActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PlayerMovementActionMapActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PlayerMovementActionMapActions @PlayerMovementActionMap => new PlayerMovementActionMapActions(this);
    public interface IPlayerMovementActionMapActions
    {
        void OnMoveLeft(InputAction.CallbackContext context);
        void OnMoveRight(InputAction.CallbackContext context);
        void OnMoveForward(InputAction.CallbackContext context);
        void OnMoveBackwards(InputAction.CallbackContext context);
        void OnMovementInput(InputAction.CallbackContext context);
    }
}
